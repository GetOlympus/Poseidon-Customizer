<?php

namespace GetOlympus\Poseidon\Utils;

use Behat\Transliterator\Transliterator;

/**
 * Helpers controller
 *
 * @package    OlympusPoseidonCustomizer
 * @subpackage Utils
 * @author     Achraf Chouk <achrafchouk@gmail.com>
 * @since      0.0.1
 *
 */

class Helpers
{
    /**
     * @var Singleton
     */
    private static $instance;

    /**
     * Get singleton.
     *
     * @return self
     */
    public static function getInstance()
    {
        if (is_null(self::$instance)) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    /**
     * Copy a file contents from this internal assets folder to the public dist Olympus assets folder.
     *
     * @param  string  $sourcePath
     * @param  string  $targetPath
     * @param  string  $filename
     * @param  bool    $symlink
     */
    public static function copyFile($sourcePath, $targetPath, $filename, $symlink = false) : void
    {
        // Check paths
        if ($sourcePath === $targetPath) {
            return;
        }

        $targetFile = rtrim($targetPath, S).S.$filename;

        // Check if file exists and create it
        if (file_exists($targetFile)) {
            return;
        }

        // Build new contents
        $sourceFile = rtrim($sourcePath, S).S.$filename;

        // Check the old file to copy its contents
        if (file_exists($sourceFile)) {
            $copy = $symlink ? symlink($sourceFile, $targetFile) : copy(realpath($sourceFile), $targetFile);
        } else {
            self::filePutContents(
                $targetFile,
                '',
                'This file has been auto-generated by the Poseidon package without any content'
            );
        }
    }

    /**
     * Helper function to enqueue files after copying them into DIST target folder
     *
     * @param  array   $assets
     * @param  string  $folder
     * @param  array   $deps
     */
    public static function enqueueFiles($assets, $folder, $deps = []) : void
    {
        if (empty($assets)) {
            return;
        }

        $target   = rtrim(OL_POSEIDON_DISTPATH, S).S;
        $uri      = OL_POSEIDON_URI.'/'.$folder.'/';
        $defaults = [
            'src'       => '',
            'deps'      => $deps,
            'ver'       => false,
            'in_footer' => true,
            'media'     => 'all',
        ];

        foreach ($assets as $file) {
            $opts = array_merge($defaults, ['src' => $file]);

            // Move files into DIST
            $source   = rtrim(dirname($opts['src']), S);
            $basename = basename($opts['src']);
            $src      = str_replace('.', '-', $basename);

            // Update file path on dist accessible folder
            self::copyFile($source, $target.$folder, $basename);

            if ('js' === $folder) {
                wp_enqueue_script($src, $uri.$basename, $opts['deps'], $opts['ver'], $opts['in_footer']);
            } else if ('css' === $folder) {
                wp_enqueue_style($src, $uri.$basename, $opts['deps'], $opts['ver'], $opts['media']);
            }
        }
    }

    /**
     * Helper function to create a file in a target path with its contents.
     *
     * @param  string  $filepath
     * @param  string  $contents
     * @param  string  $message
     * @param  bool    $usedate
     */
    public static function filePutContents($filepath, $contents, $message, $usedate = true) : void
    {
        $suffix = '';

        // Check date
        if ($usedate) {
            $suffix = ' on '.date('l jS \of F Y h:i:s A');
        }

        // Update contents
        $contents = !empty($contents) ? $contents."\n" : $contents;

        // Copy file contents
        file_put_contents($filepath, "/**\n * ".$message.$suffix.".\n */\n\n".$contents);
    }

    /**
     * Slugify string.
     *
     * @param  string  $text
     * @param  string  $separator
     *
     * @return string
     */
    public static function urlize($text, $separator = '-') : string
    {
        return Transliterator::urlize($text, $separator);
    }
}
